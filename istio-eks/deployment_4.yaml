
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress
  namespace: istio-system
  labels:
    name: nginx-ingress
spec:
  rules:
  - 
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: istio-ingressgateway
            port: 
              number: 80

---
apiVersion: v1
kind: Service
metadata:
  name: redis-master
  labels:
    app: redis
    tier: backend
    role: master
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis
    tier: backend
    role: master
---
apiVersion: apps/v1 #  for k8s versions before 1.9.0 use apps/v1beta2  and before 1.8.0 use extensions/v1beta1
kind: Deployment
metadata:
  name: redis-master
spec:
  selector:
    matchLabels:
      app: redis
      role: master
      tier: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
        role: master
        tier: backend
    spec:
      containers:
      - name: master
        image: k8s.gcr.io/redis:e2e  # or just image: redis
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis-slave
  labels:
    app: redis
    tier: backend
    role: replica
spec:
  ports:
  - port: 6379
  selector:
    app: redis
    tier: backend
    role: replica
---
apiVersion: apps/v1 #  for k8s versions before 1.9.0 use apps/v1beta2  and before 1.8.0 use extensions/v1beta1
kind: Deployment
metadata:
  name: redis-replica
spec:
  selector:
    matchLabels:
      app: redis
      role: replica
      tier: backend
  replicas: 2
  template:
    metadata:
      labels:
        app: redis
        role: replica
        tier: backend
    spec:
      containers:
      - name: replica
        image: gcr.io/google_samples/gb-redisslave:v1
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access an environment variable to find the master
          # service's host, comment out the 'value: dns' line above, and
          # uncomment the line below:
          # value: env
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  labels:
    app: guestbook
    tier: frontend
spec:
  # comment or delete the following line if you want to use a LoadBalancer
  #type: NodePort
  # if your cluster supports it, uncomment the following to automatically create
  # an external load-balanced IP for the frontend service.
  type: ClusterIP
  ports:
  - port: 80
  selector:
    app: guestbook
    tier: frontend
---
apiVersion: apps/v1 #  for k8s versions before 1.9.0 use apps/v1beta2  and before 1.8.0 use extensions/v1beta1
kind: Deployment
metadata:
  name: frontend
spec:
  selector:
    matchLabels:
      app: guestbook
      tier: frontend
  replicas: 1
  template:
    metadata:
      labels:
        app: guestbook
        tier: frontend
    spec:
      containers:
      - name: php-redis
        image: gcr.io/google-samples/gb-frontend:v4
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          # value: dns
          # # If your cluster config does not include a dns service, then to
          # # instead access environment variables to find service host
          # # info, comment out the 'value: dns' line above, and uncomment the
          # # line below:
          value: env
        ports:
        - containerPort: 80
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: guestbook-gateway
  namespace: default
spec:
  selector:
    istio: ingressgateway # use default istio gateway proxy in `istio-system` namespace, which exposes it using K8s service of LoadBalancer, which creates AWS ELB
  servers: # defines L7 host, port, and protocol
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts: # host in http header
    - "*"


---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: guestbook-virtualservice
  namespace: default
spec:
  hosts:
  - "*"
  gateways: # using gateways field, it'll be exposed externally
  - guestbook-gateway
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: frontend # specify service name
        port:
          number: 80
--- 


# apiVersion: networking.istio.io/v1alpha3
# kind: VirtualService
# metadata:
#   name: health
# spec:
#   gateways:
#   - guestbook-gateway
#   hosts:
#   - "*"
#   http:
#   - match:
#     - headers:
#         user-agent:
#           prefix: GoogleHC
#       method:
#         exact: GET
#       uri:
#         exact: /
#     rewrite:
#       authority: istio-ingressgateway.istio-system.svc.cluster.local:15020
#       uri: /healthz/ready
#     route:
#     - destination:
#         host: istio-ingressgateway.istio-system.svc.cluster.local
#         port:
#           number: 15020


# apiVersion: networking.istio.io/v1alpha3
# kind: VirtualService
# metadata:
#   name: health
# spec:
#   gateways:
#   - guestbook-gateway
#   hosts:
#   - "*"
#   http:
#   - match:
#     - headers:
#         user-agent:
#           prefix: GoogleHC
#       method:
#         exact: GET
#       uri:
#         exact: /
#     rewrite:
#       authority: istio-ingressgateway.istio-system.svc.cluster.local:15020
#       uri: /healthz/ready
#     route:
#     - destination:
#         host: istio-ingressgateway.istio-system.svc.cluster.local
#         port:
#           number: 15020

---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: http-hc-config
spec:
  healthCheck:
    checkIntervalSec: 15
    port: 15020
    type: HTTP
    requestPath: /healthz/ready